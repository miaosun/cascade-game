//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-06 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\Workspace\\MFES\\Project\\Cascade\\Board/Board.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
package logic;
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Token;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {


// ***** VDMTOOLS START Name=Position KEEP=NO
  public static class Position implements Record {

    public Number posX;

    public Number posY;


    public Position () {}


    public Position (Number p1, Number p2) {
      posX = p1;
      posY = p2;
    }


    public Object clone () {
      return new Position(posX, posY);
    }


    public String toString () {
      return "mk_Board`Position(" + UTIL.toString(posX) + ", " + UTIL.toString(posY) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof Position)) 
        return false;
      else {
        Position temp = (Position)obj;
        return UTIL.equals(posX, temp.posX) && UTIL.equals(posY, temp.posY);
      }
    }


    public int hashCode () {
      return (posX == null ? 0 : posX.hashCode()) + (posY == null ? 0 : posY.hashCode());
    }

  }
// ***** VDMTOOLS END Name=Position
;

// ***** VDMTOOLS START Name=pieces KEEP=NO
  public volatile Map pieces = new HashMap();
// ***** VDMTOOLS END Name=pieces

// ***** VDMTOOLS START Name=next_pieces KEEP=NO
  public volatile Map next_pieces = new HashMap();
// ***** VDMTOOLS END Name=next_pieces

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board = 0;

    public final int print = 1;

    public final int explode = 2;

    public final int distLeft = 3;

    public final int fixBoard = 4;

    public final int moveLeft = 5;

    public final int distRight = 6;

    public final int moveRight = 7;

    public final int willFinish = 8;

    public final int selectPiece = 9;

    public final int deletePieces = 10;

    public final int generateColor = 11;

    public final int getNeighbours = 12;

    public final int insertNewLine = 13;

    public final int selectPieceIter = 14;

    public final int fixBoardVertical = 15;

    public final int nr_functions = 16;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=LimiteX KEEP=NO
  public static final Number LimiteX = new Integer(15);
// ***** VDMTOOLS END Name=LimiteX

// ***** VDMTOOLS START Name=LimiteY KEEP=NO
  public static final Number LimiteY = new Integer(11);
// ***** VDMTOOLS END Name=LimiteY

// ***** VDMTOOLS START Name=start_lines KEEP=NO
  public static final Number start_lines = new Integer(6);
// ***** VDMTOOLS END Name=start_lines

// ***** VDMTOOLS START Name=io KEEP=NO
  private static final IO io;
// ***** VDMTOOLS END Name=io


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    IO iotemp = null;
    try {
      /* iotemp */
      iotemp = new IO();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
    io = iotemp;
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=inv_X#1|Number KEEP=NO
  static public Boolean inv_X (final Number x) throws CGException {
    Set var2_4 = new HashSet();
    var2_4 = new HashSet();
    int ubi_9 = LimiteX.intValue();
    for (int count_7 = 0; count_7 <= ubi_9; count_7++) 
      var2_4.add(new Integer(count_7));
    return Boolean.valueOf(UTIL.Contains(var2_4, x));
  }
// ***** VDMTOOLS END Name=inv_X#1|Number


// ***** VDMTOOLS START Name=inv_Y#1|Number KEEP=NO
  static public Boolean inv_Y (final Number y) throws CGException {
    Set var2_4 = new HashSet();
    var2_4 = new HashSet();
    int ubi_9 = LimiteY.intValue();
    for (int count_7 = 0; count_7 <= ubi_9; count_7++) 
      var2_4.add(new Integer(count_7));
    return Boolean.valueOf(UTIL.Contains(var2_4, y));
  }
// ***** VDMTOOLS END Name=inv_Y#1|Number


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      pieces = new HashMap();
      next_pieces = new HashMap();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=inv_Board KEEP=NO
  public Boolean inv_Board () {
    boolean tmpQuant_11 = true;
    {
      Set e1_set_14 = new HashSet(next_pieces.values());
      Cell p = null;
      Set tmpSet_27 = new HashSet(e1_set_14);
      for (Iterator enm_26 = tmpSet_27.iterator(); enm_26.hasNext() && tmpQuant_11; ) {
        Cell elem_25 = (Cell)enm_26.next();
        /* p */
        p = elem_25;
        Boolean pred_15 = null;
        if ((pred_15 = Boolean.valueOf(!UTIL.equals((p.color), new quotes.empty()))).booleanValue()) 
          pred_15 = Boolean.valueOf(!UTIL.equals((p.color), new quotes.bomb()));
        if (!pred_15.booleanValue()) 
          tmpQuant_11 = false;
      }
    }
    return Boolean.valueOf(tmpQuant_11);
  }
// ***** VDMTOOLS END Name=inv_Board


// ***** VDMTOOLS START Name=printCell#1|Cell KEEP=NO
  static public Boolean printCell (final Cell p) throws CGException {
    Boolean varRes_2 = null;
    if (UTIL.equals((p.color), new quotes.red())) 
      varRes_2 = io.echo(new String("R   "));
    else if (UTIL.equals((p.color), new quotes.yellow())) 
      varRes_2 = io.echo(new String("Y   "));
    else if (UTIL.equals((p.color), new quotes.green())) 
      varRes_2 = io.echo(new String("G   "));
    else if (UTIL.equals((p.color), new quotes.bomb())) 
      varRes_2 = io.echo(new String("#   "));
    else 
      varRes_2 = io.echo(new String(".    "));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=printCell#1|Cell


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      if (!this.pre_Board().booleanValue()) 
        UTIL.RunTime("Precondition failure in Board");
      //new MATH().srand(new Integer(1));
      {
        Set iset_6 = new HashSet();
        iset_6 = new HashSet();
        int ubi_11 = LimiteX.intValue();
        for (int count_9 = 0; count_9 <= ubi_11; count_9++) 
          iset_6.add(new Integer(count_9));
        Set iset_12 = iset_6;
        Set tmpSet_52 = new HashSet(iset_12);
        for (Iterator enm_51 = tmpSet_52.iterator(); enm_51.hasNext(); ) {
          Number elem_4 = UTIL.NumberToInt(enm_51.next());
          Number x = null;
          /* x */
          x = elem_4;
          {
            Set iset_15 = new HashSet();
            iset_15 = new HashSet();
            int lbi_21 = (start_lines.intValue() - 1);
            int ubi_22 = LimiteY.intValue();
            for (int count_20 = lbi_21; count_20 <= ubi_22; count_20++) 
              iset_15.add(new Integer(count_20));
            Set iset_23 = iset_15;
            Set tmpSet_29 = new HashSet(iset_23);
            for (Iterator enm_28 = tmpSet_29.iterator(); enm_28.hasNext(); ) {
              Number elem_13 = UTIL.NumberToInt(enm_28.next());
              Number y = null;
              /* y */
              y = elem_13;
              pieces.put(new Position(x, y), new Cell());
            }
          }
          {
            Set iset_32 = new HashSet();
            iset_32 = new HashSet();
            int ubi_39 = (start_lines.intValue() - 1);
            for (int count_37 = 0; count_37 <= ubi_39; count_37++) 
              iset_32.add(new Integer(count_37));
            Set iset_40 = iset_32;
            Set tmpSet_47 = new HashSet(iset_40);
            for (Iterator enm_46 = tmpSet_47.iterator(); enm_46.hasNext(); ) {
              Number elem_30 = UTIL.NumberToInt(enm_46.next());
              Number y = null;
              /* y */
              y = elem_30;
              pieces.put(new Position(x, y), new Cell(generateColor()));
            }
          }
          next_pieces.put(x, new Cell(generateColor()));
        }
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=pre_Board KEEP=NO
  public Boolean pre_Board () throws CGException {
    return Boolean.valueOf(UTIL.equals((this.pieces), new HashMap()));
  }
// ***** VDMTOOLS END Name=pre_Board


// ***** VDMTOOLS START Name=generateColor KEEP=NO
  public Object generateColor () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).generateColor);
    try {
      Number num = null;
      MATH obj_2 = new MATH();
      num = (int)(Math.random()*3); //obj_2.rand(new Integer(3));
      if (num.intValue() == 0) 
        return new quotes.yellow();
      else if (num.intValue() == 1) 
        return new quotes.green();
      else 
        return new quotes.red();
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).generateColor);
    }
  }
// ***** VDMTOOLS END Name=generateColor


// ***** VDMTOOLS START Name=insertNewLine KEEP=NO
  public void insertNewLine () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).insertNewLine);
    try {
      if (!this.pre_insertNewLine().booleanValue()) 
        UTIL.RunTime("Precondition failure in insertNewLine");
      {
        Map new_pieces = new HashMap();
        Map res_m_1 = new HashMap();
        {
          Set e_set_6 = new HashSet();
          e_set_6 = new HashSet();
          int ubi_11 = LimiteX.intValue();
          for (int count_9 = 0; count_9 <= ubi_11; count_9++) 
            e_set_6.add(new Integer(count_9));
          Set e_set_12 = new HashSet();
          e_set_12 = new HashSet();
          int ubi_17 = LimiteY.intValue();
          for (int count_15 = 0; count_15 <= ubi_17; count_15++) 
            e_set_12.add(new Integer(count_15));
          Number x = null;
          Number y = null;
          Set tmpSet_24 = new HashSet(e_set_12);
          for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
            Number elem_22 = UTIL.NumberToInt(enm_23.next());
            /* y */
            y = elem_22;
            Set tmpSet_21 = new HashSet(e_set_6);
            for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
              Number elem_19 = UTIL.NumberToInt(enm_20.next());
              /* x */
              x = elem_19;
              res_m_1.put(new Position(x, y), new Cell());
            }
          }
        }
        new_pieces = res_m_1;
        Map new_next_pieces = new HashMap();
        {
          Set iset_29 = new HashSet(pieces.keySet());
          Set tmpSet_47 = new HashSet(iset_29);
          for (Iterator enm_46 = tmpSet_47.iterator(); enm_46.hasNext(); ) {
            Position elem_25 = (Position)enm_46.next();
            Position pos = null;
            /* pos */
            pos = elem_25;
            if (!UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty())) {
              Position new_pos = new Position((pos.posX), new Integer((pos.posY).intValue() + 1));
              new_pieces.put(new_pos, (Cell)pieces.get(pos));
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
          }
        }
        {
          Set iset_50 = new HashSet();
          iset_50 = new HashSet();
          int ubi_55 = LimiteX.intValue();
          for (int count_53 = 0; count_53 <= ubi_55; count_53++) 
            iset_50.add(new Integer(count_53));
          Set iset_56 = iset_50;
          Set tmpSet_67 = new HashSet(iset_56);
          for (Iterator enm_66 = tmpSet_67.iterator(); enm_66.hasNext(); ) {
            Number elem_48 = UTIL.NumberToInt(enm_66.next());
            Number x = null;
            /* x */
            x = elem_48;
            new_next_pieces.put(x, new Cell(generateColor()));
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
            new_pieces.put(new Position(x, new Integer(0)), (Cell)next_pieces.get(x));
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        pieces = (Map)UTIL.clone(new_pieces);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        next_pieces = (Map)UTIL.clone(new_next_pieces);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).insertNewLine);
    }
  }
// ***** VDMTOOLS END Name=insertNewLine


// ***** VDMTOOLS START Name=pre_insertNewLine KEEP=NO
  public Boolean pre_insertNewLine () throws CGException {
    return Boolean.valueOf(UTIL.equals(willFinish(), Boolean.FALSE));
  }
// ***** VDMTOOLS END Name=pre_insertNewLine


// ***** VDMTOOLS START Name=willFinish KEEP=NO
  public Boolean willFinish () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).willFinish);
    try {
      Set res_s_4 = new HashSet();
      {
        Set e1_set_8 = new HashSet(pieces.keySet());
        Position pos = null;
        Set tmpSet_23 = new HashSet(e1_set_8);
        for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
          Position elem_21 = (Position)enm_22.next();
          /* pos */
          pos = elem_21;
          Boolean pred_9 = null;
          if ((pred_9 = Boolean.valueOf((pos.posY).intValue() == LimiteY.intValue())).booleanValue()) 
            pred_9 = Boolean.valueOf(!UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty()));
          if (pred_9.booleanValue()) {
            res_s_4.add(pos);
          }
        }
      }
      return Boolean.valueOf(res_s_4.size() > 0);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).willFinish);
    }
  }
// ***** VDMTOOLS END Name=willFinish


// ***** VDMTOOLS START Name=print KEEP=NO
  public void print () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).print);
    try {
      Boolean res = null;
      {
        Set iset_3 = new HashSet();
        iset_3 = new HashSet();
        int ubi_8 = LimiteY.intValue();
        for (int count_6 = 0; count_6 <= ubi_8; count_6++) 
          iset_3.add(new Integer(count_6));
        Set iset_9 = iset_3;
        Set tmpSet_32 = new HashSet(iset_9);
        for (Iterator enm_31 = tmpSet_32.iterator(); enm_31.hasNext(); ) {
          Number elem_1 = UTIL.NumberToInt(enm_31.next());
          Number y = null;
          /* y */
          y = elem_1;
          {
            Set iset_12 = new HashSet();
            iset_12 = new HashSet();
            int lbi_17 = (-LimiteX.intValue());
            for (int count_16 = lbi_17; count_16 <= 0; count_16++) 
              iset_12.add(new Integer(count_16));
            Set iset_19 = iset_12;
            Set tmpSet_28 = new HashSet(iset_19);
            for (Iterator enm_27 = tmpSet_28.iterator(); enm_27.hasNext(); ) {
              Number elem_10 = UTIL.NumberToInt(enm_27.next());
              Number x = null;
              /* x */
              x = elem_10;
              {
                Cell p = (Cell)pieces.get(new Position(new Integer(-x.intValue()), y));
                res = (Boolean)UTIL.clone(printCell(p));
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
              }
            }
          }
          res = (Boolean)UTIL.clone(io.echo(new String("\n")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
      }
      {
        Set iset_35 = new HashSet();
        iset_35 = new HashSet();
        int ubi_40 = LimiteX.intValue();
        for (int count_38 = 0; count_38 <= ubi_40; count_38++) 
          iset_35.add(new Integer(count_38));
        Set iset_41 = iset_35;
        Set tmpSet_45 = new HashSet(iset_41);
        for (Iterator enm_44 = tmpSet_45.iterator(); enm_44.hasNext(); ) {
          Number elem_33 = UTIL.NumberToInt(enm_44.next());
          Number x = null;
          /* x */
          x = elem_33;
          res = (Boolean)UTIL.clone(io.echo(new String("----")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
      }
      res = (Boolean)UTIL.clone(io.echo(new String("\n")));
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      {
        Set iset_50 = new HashSet();
        iset_50 = new HashSet();
        int ubi_55 = LimiteX.intValue();
        for (int count_53 = 0; count_53 <= ubi_55; count_53++) 
          iset_50.add(new Integer(count_53));
        Set iset_56 = iset_50;
        Set tmpSet_62 = new HashSet(iset_56);
        for (Iterator enm_61 = tmpSet_62.iterator(); enm_61.hasNext(); ) {
          Number elem_48 = UTIL.NumberToInt(enm_61.next());
          Number x = null;
          /* x */
          x = elem_48;
          {
            Cell p = (Cell)next_pieces.get(x);
            res = (Boolean)UTIL.clone(printCell(p));
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).print);
    }
  }
// ***** VDMTOOLS END Name=print


// ***** VDMTOOLS START Name=selectPiece#1|Position KEEP=NO
  public Set selectPiece (final Position pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).selectPiece);
    try {
      if (!this.pre_selectPiece(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in selectPiece");
      return selectPieceIter(pos, new HashSet());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).selectPiece);
    }
  }
// ***** VDMTOOLS END Name=selectPiece#1|Position


// ***** VDMTOOLS START Name=pre_selectPiece#1|Position KEEP=NO
  public Boolean pre_selectPiece (final Position pos) throws CGException {
    return Boolean.valueOf(!UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty()));
  }
// ***** VDMTOOLS END Name=pre_selectPiece#1|Position


// ***** VDMTOOLS START Name=selectPieceIter#2|Position|Set KEEP=NO
  public Set selectPieceIter (final Position pos, final Set analyzed) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).selectPieceIter);
    try {
      if (!this.pre_selectPieceIter(pos, analyzed).booleanValue()) 
        UTIL.RunTime("Precondition failure in selectPieceIter");
      {
        Set neighbours = getNeighbours(pos);
        Set res = new HashSet();
        {
          Set tmpSet_23 = new HashSet(neighbours);
          for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
            Position elem_4 = (Position)enm_22.next();
            Position p = null;
            /* p */
            p = elem_4;
            Set var2_10 = new HashSet();
            Set var2_12 = new HashSet();
            var2_12.add(pos);
            var2_10 = new HashSet(analyzed);
            var2_10.addAll(var2_12);
            if (!UTIL.Contains(var2_10, p)) {
              Set rhs_14 = new HashSet();
              Set par_18 = new HashSet();
              Set var2_20 = new HashSet();
              var2_20.add(pos);
              par_18 = new HashSet(analyzed);
              par_18.addAll(var2_20);
              rhs_14 = new HashSet(res);
              rhs_14.addAll(selectPieceIter(p, par_18));
              res = (Set)UTIL.clone(rhs_14);
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
          }
        }
        Set rexpr_24 = new HashSet();
        Set var2_26 = new HashSet();
        var2_26.add(pos);
        rexpr_24 = new HashSet(res);
        rexpr_24.addAll(var2_26);
        return rexpr_24;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).selectPieceIter);
    }
  }
// ***** VDMTOOLS END Name=selectPieceIter#2|Position|Set


// ***** VDMTOOLS START Name=pre_selectPieceIter#2|Position|Set KEEP=NO
  public Boolean pre_selectPieceIter (final Position pos, final Set analyzed) throws CGException {
    return Boolean.valueOf(!UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty()));
  }
// ***** VDMTOOLS END Name=pre_selectPieceIter#2|Position|Set


// ***** VDMTOOLS START Name=getNeighbours#1|Position KEEP=NO
  public Set getNeighbours (final Position pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getNeighbours);
    try {
      if (!this.pre_getNeighbours(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in getNeighbours");
      {
        Set res = new HashSet();
        res.add(pos);
        if ((pos.posX).intValue() > 0) {
          Position n_pos = new Position(new Integer((pos.posX).intValue() - 1), (pos.posY));
          if (UTIL.equals((((Cell)pieces.get(pos)).color), (((Cell)pieces.get(n_pos)).color))) {
            res.add(n_pos);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        if ((pos.posY).intValue() > 0) {
          Position n_pos = new Position((pos.posX), new Integer((pos.posY).intValue() - 1));
          if (UTIL.equals((((Cell)pieces.get(pos)).color), (((Cell)pieces.get(n_pos)).color))) {
            res.add(n_pos);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        if ((pos.posX).intValue() < LimiteX.intValue()) {
          Position n_pos = new Position(new Integer((pos.posX).intValue() + 1), (pos.posY));
          if (UTIL.equals((((Cell)pieces.get(pos)).color), (((Cell)pieces.get(n_pos)).color))) {
            res.add(n_pos);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        if ((pos.posY).intValue() < LimiteY.intValue()) {
          Position n_pos = new Position((pos.posX), new Integer((pos.posY).intValue() + 1));
          if (UTIL.equals((((Cell)pieces.get(pos)).color), (((Cell)pieces.get(n_pos)).color))) {
            res.add(n_pos);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        return res;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getNeighbours);
    }
  }
// ***** VDMTOOLS END Name=getNeighbours#1|Position


// ***** VDMTOOLS START Name=pre_getNeighbours#1|Position KEEP=NO
  public Boolean pre_getNeighbours (final Position pos) throws CGException {
    return Boolean.valueOf(!UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty()));
  }
// ***** VDMTOOLS END Name=pre_getNeighbours#1|Position


// ***** VDMTOOLS START Name=deletePieces#1|Position KEEP=NO
  public Number deletePieces (final Position pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).deletePieces);
    try {
      Set pieces_to_delete = new HashSet();
      Number n_pieces = null;
      if (UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.empty())) 
        return new Integer(0);
      if (UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.bomb())) {
        explode(pos);
        fixBoard();
        return new Integer(0);
      }
      pieces_to_delete = (Set)UTIL.clone(selectPiece(pos));
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      n_pieces = new Integer(pieces_to_delete.size());
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      if (n_pieces.intValue() < 3) 
        return n_pieces;
      {
        Set tmpSet_38 = new HashSet(pieces_to_delete);
        for (Iterator enm_37 = tmpSet_38.iterator(); enm_37.hasNext(); ) {
          Position elem_27 = (Position)enm_37.next();
          Position p = null;
          /* p */
          p = elem_27;
          Cell level_32 = null;
          if (pieces.containsKey(p)) 
            level_32 = (Cell)pieces.get(p);
          else 
            level_32 = new Cell();
          level_32.color = new quotes.empty();
          pieces.put(p, level_32);
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
      }
      if (n_pieces.intValue() >= 15) {
        Cell obj_46 = (Cell)pieces.get(pos);
        obj_46.makeBomb();
      }
      fixBoard();
      return n_pieces;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).deletePieces);
    }
  }
// ***** VDMTOOLS END Name=deletePieces#1|Position


// ***** VDMTOOLS START Name=explode#1|Position KEEP=NO
  public void explode (final Position pos) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).explode);
    try {
      if (!this.pre_explode(pos).booleanValue()) 
        UTIL.RunTime("Precondition failure in explode");
      {
        Set iset_4 = new HashSet();
        iset_4 = new HashSet();
        for (int count_8 = -3; count_8 <= 3; count_8++) 
          iset_4.add(new Integer(count_8));
        Set iset_11 = iset_4;
        Set tmpSet_82 = new HashSet(iset_11);
        for (Iterator enm_81 = tmpSet_82.iterator(); enm_81.hasNext(); ) {
          Number elem_2 = UTIL.NumberToInt(enm_81.next());
          Number x = null;
          /* x */
          x = elem_2;
          {
            Set iset_14 = new HashSet();
            iset_14 = new HashSet();
            for (int count_18 = -3; count_18 <= 3; count_18++) 
              iset_14.add(new Integer(count_18));
            Set iset_21 = iset_14;
            Set tmpSet_80 = new HashSet(iset_21);
            for (Iterator enm_79 = tmpSet_80.iterator(); enm_79.hasNext(); ) {
              Number elem_12 = UTIL.NumberToInt(enm_79.next());
              Number y = null;
              /* y */
              y = elem_12;
              Boolean cond_22 = null;
              Boolean var1_23 = null;
              Boolean var1_24 = null;
              Boolean var1_25 = null;
              if ((var1_25 = Boolean.valueOf((Math.abs(x.intValue()) + Math.abs(y.intValue())) <= 3)).booleanValue()) 
                var1_25 = Boolean.valueOf(((pos.posX).intValue() + x.intValue()) <= LimiteX.intValue());
              if ((var1_24 = var1_25).booleanValue()) 
                var1_24 = Boolean.valueOf(((pos.posX).intValue() + x.intValue()) >= 0);
              if ((var1_23 = var1_24).booleanValue()) 
                var1_23 = Boolean.valueOf(((pos.posY).intValue() + y.intValue()) <= LimiteY.intValue());
              if ((cond_22 = var1_23).booleanValue()) 
                cond_22 = Boolean.valueOf(((pos.posY).intValue() + y.intValue()) >= 0);
              if (cond_22.booleanValue()) {
                Cell level_58 = null;
                if (pieces.containsKey(new Position(new Integer((pos.posX).intValue() + x.intValue()), new Integer((pos.posY).intValue() + y.intValue())))) 
                  level_58 = (Cell)pieces.get(new Position(new Integer((pos.posX).intValue() + x.intValue()), new Integer((pos.posY).intValue() + y.intValue())));
                else 
                  level_58 = new Cell();
                level_58.color = new quotes.empty();
                pieces.put(new Position(new Integer((pos.posX).intValue() + x.intValue()), new Integer((pos.posY).intValue() + y.intValue())), level_58);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
              }
            }
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).explode);
    }
  }
// ***** VDMTOOLS END Name=explode#1|Position


// ***** VDMTOOLS START Name=pre_explode#1|Position KEEP=NO
  public Boolean pre_explode (final Position pos) throws CGException {
    return Boolean.valueOf(UTIL.equals((((Cell)pieces.get(pos)).color), new quotes.bomb()));
  }
// ***** VDMTOOLS END Name=pre_explode#1|Position


// ***** VDMTOOLS START Name=fixBoard KEEP=NO
  public void fixBoard () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).fixBoard);
    try {
      Number count = new Integer(0);
      {
        Set iset_5 = new HashSet(pieces.keySet());
        Set tmpSet_61 = new HashSet(iset_5);
        for (Iterator enm_60 = tmpSet_61.iterator(); enm_60.hasNext(); ) {
          Position elem_1 = (Position)enm_60.next();
          Position p = null;
          /* p */
          p = elem_1;
          Boolean cond_6 = null;
          Boolean var1_7 = null;
          if ((var1_7 = Boolean.valueOf(!UTIL.equals((((Cell)pieces.get(p)).color), new quotes.empty()))).booleanValue()) 
            var1_7 = Boolean.valueOf((p.posY).intValue() > 0);
          if ((cond_6 = var1_7).booleanValue()) 
            cond_6 = Boolean.valueOf(UTIL.equals((((Cell)pieces.get(new Position((p.posX), new Integer((p.posY).intValue() - 1)))).color), new quotes.empty()));
          if (cond_6.booleanValue()) {
            count = new Integer(count.intValue() + 1);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
            Cell level_37 = null;
            if (pieces.containsKey(new Position((p.posX), new Integer((p.posY).intValue() - 1)))) 
              level_37 = (Cell)pieces.get(new Position((p.posX), new Integer((p.posY).intValue() - 1)));
            else 
              level_37 = new Cell();
            level_37.color = (((Cell)pieces.get(p)).color);
            pieces.put(new Position((p.posX), new Integer((p.posY).intValue() - 1)), level_37);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
            Cell level_55 = null;
            if (pieces.containsKey(p)) 
              level_55 = (Cell)pieces.get(p);
            else 
              level_55 = new Cell();
            level_55.color = new quotes.empty();
            pieces.put(p, level_55);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
      }
      if (count.intValue() > 0) 
        fixBoard();
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).fixBoard);
    }
  }
// ***** VDMTOOLS END Name=fixBoard


// ***** VDMTOOLS START Name=fixBoardVertical KEEP=NO
  public void fixBoardVertical () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).fixBoardVertical);
    try {
      Number count = new Integer(0);
      {
        Set iset_5 = new HashSet(pieces.keySet());
        Set tmpSet_38 = new HashSet(iset_5);
        for (Iterator enm_37 = tmpSet_38.iterator(); enm_37.hasNext(); ) {
          Position elem_1 = (Position)enm_37.next();
          Position p = null;
          /* p */
          p = elem_1;
          Boolean cond_6 = null;
          if ((cond_6 = Boolean.valueOf(UTIL.equals((((Cell)pieces.get(p)).color), new quotes.empty()))).booleanValue()) 
            cond_6 = Boolean.valueOf((p.posY).intValue() == 0);
          if (cond_6.booleanValue()) {
            Number distLeft_1 = distLeft((p.posX));
            Number distRight_1 = distRight((p.posX));
            if (distLeft_1.intValue() < (p.posX).intValue()) {
              count = new Integer(count.intValue() + moveRight(distLeft_1).intValue());
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
            if (distRight_1.intValue() > (p.posX).intValue()) {
              count = new Integer(count.intValue() + moveLeft(distRight_1).intValue());
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
          }
        }
      }
      if (count.intValue() > 0) 
        fixBoardVertical();
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).fixBoardVertical);
    }
  }
// ***** VDMTOOLS END Name=fixBoardVertical


// ***** VDMTOOLS START Name=distLeft#1|Number KEEP=NO
  public Number distLeft (final Number posx) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).distLeft);
    try {
      {
        Set iset_4 = new HashSet();
        iset_4 = new HashSet();
        int ubi_11 = (posx.intValue() - 1);
        for (int count_9 = 0; count_9 <= ubi_11; count_9++) 
          iset_4.add(new Integer(count_9));
        Set iset_12 = iset_4;
        Set tmpSet_25 = new HashSet(iset_12);
        for (Iterator enm_24 = tmpSet_25.iterator(); enm_24.hasNext(); ) {
          Number elem_2 = UTIL.NumberToInt(enm_24.next());
          Number x = null;
          /* x */
          x = elem_2;
          if (!UTIL.equals((((Cell)pieces.get(new Position(new Integer(-x.intValue()), new Integer(0)))).color), new quotes.empty())) 
            return new Integer(-x.intValue());
        }
      }
      return posx;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).distLeft);
    }
  }
// ***** VDMTOOLS END Name=distLeft#1|Number


// ***** VDMTOOLS START Name=distRight#1|Number KEEP=NO
  public Number distRight (final Number posx) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).distRight);
    try {
      {
        Set iset_4 = new HashSet();
        iset_4 = new HashSet();
        int lbi_10 = (posx.intValue() + 1);
        int ubi_11 = LimiteX.intValue();
        for (int count_9 = lbi_10; count_9 <= ubi_11; count_9++) 
          iset_4.add(new Integer(count_9));
        Set iset_12 = iset_4;
        Set tmpSet_23 = new HashSet(iset_12);
        for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
          Number elem_2 = UTIL.NumberToInt(enm_22.next());
          Number x = null;
          /* x */
          x = elem_2;
          if (!UTIL.equals((((Cell)pieces.get(new Position(x, new Integer(0)))).color), new quotes.empty())) 
            return x;
        }
      }
      return posx;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).distRight);
    }
  }
// ***** VDMTOOLS END Name=distRight#1|Number


// ***** VDMTOOLS START Name=moveLeft#1|Number KEEP=NO
  public Number moveLeft (final Number posx) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).moveLeft);
    try {
      if (!this.pre_moveLeft(posx).booleanValue()) 
        UTIL.RunTime("Precondition failure in moveLeft");
      {
        Map new_pieces = pieces;
        Number count = new Integer(0);
        {
          Set iset_4 = new HashSet();
          iset_4 = new HashSet();
          int lbi_10 = (-LimiteX.intValue());
          int ubi_11 = (-posx.intValue());
          for (int count_9 = lbi_10; count_9 <= ubi_11; count_9++) 
            iset_4.add(new Integer(count_9));
          Set iset_12 = iset_4;
          Set tmpSet_62 = new HashSet(iset_12);
          for (Iterator enm_61 = tmpSet_62.iterator(); enm_61.hasNext(); ) {
            Number elem_2 = UTIL.NumberToInt(enm_61.next());
            Number x = null;
            /* x */
            x = elem_2;
            {
              Set iset_15 = new HashSet();
              iset_15 = new HashSet();
              int ubi_20 = LimiteY.intValue();
              for (int count_18 = 0; count_18 <= ubi_20; count_18++) 
                iset_15.add(new Integer(count_18));
              Set iset_21 = iset_15;
              Set tmpSet_60 = new HashSet(iset_21);
              for (Iterator enm_59 = tmpSet_60.iterator(); enm_59.hasNext(); ) {
                Number elem_13 = UTIL.NumberToInt(enm_59.next());
                Number y = null;
                /* y */
                y = elem_13;
                Cell level_29 = null;
                if (new_pieces.containsKey(new Position(new Integer((-x.intValue()) - 1), y))) 
                  level_29 = (Cell)new_pieces.get(new Position(new Integer((-x.intValue()) - 1), y));
                else 
                  level_29 = new Cell();
                level_29.color = (((Cell)pieces.get(new Position(new Integer(-x.intValue()), y))).color);
                new_pieces.put(new Position(new Integer((-x.intValue()) - 1), y), level_29);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
                Cell level_45 = null;
                if (new_pieces.containsKey(new Position(new Integer(-x.intValue()), y))) 
                  level_45 = (Cell)new_pieces.get(new Position(new Integer(-x.intValue()), y));
                else 
                  level_45 = new Cell();
                level_45.color = new quotes.empty();
                new_pieces.put(new Position(new Integer(-x.intValue()), y), level_45);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
                count = new Integer(count.intValue() + 1);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
              }
            }
          }
        }
        pieces = (Map)UTIL.clone(new_pieces);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        return count;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).moveLeft);
    }
  }
// ***** VDMTOOLS END Name=moveLeft#1|Number


// ***** VDMTOOLS START Name=pre_moveLeft#1|Number KEEP=NO
  public Boolean pre_moveLeft (final Number posx) throws CGException {
    return Boolean.valueOf(posx.intValue() >= 1);
  }
// ***** VDMTOOLS END Name=pre_moveLeft#1|Number


// ***** VDMTOOLS START Name=moveRight#1|Number KEEP=NO
  public Number moveRight (final Number posx) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).moveRight);
    try {
      if (!this.pre_moveRight(posx).booleanValue()) 
        UTIL.RunTime("Precondition failure in moveRight");
      {
        Map new_pieces = pieces;
        Number count = new Integer(0);
        {
          Set iset_4 = new HashSet();
          iset_4 = new HashSet();
          int ubi_9 = posx.intValue();
          for (int count_7 = 0; count_7 <= ubi_9; count_7++) 
            iset_4.add(new Integer(count_7));
          Set iset_10 = iset_4;
          Set tmpSet_55 = new HashSet(iset_10);
          for (Iterator enm_54 = tmpSet_55.iterator(); enm_54.hasNext(); ) {
            Number elem_2 = UTIL.NumberToInt(enm_54.next());
            Number x = null;
            /* x */
            x = elem_2;
            {
              Set iset_13 = new HashSet();
              iset_13 = new HashSet();
              int ubi_18 = LimiteY.intValue();
              for (int count_16 = 0; count_16 <= ubi_18; count_16++) 
                iset_13.add(new Integer(count_16));
              Set iset_19 = iset_13;
              Set tmpSet_53 = new HashSet(iset_19);
              for (Iterator enm_52 = tmpSet_53.iterator(); enm_52.hasNext(); ) {
                Number elem_11 = UTIL.NumberToInt(enm_52.next());
                Number y = null;
                /* y */
                y = elem_11;
                Cell level_26 = null;
                if (new_pieces.containsKey(new Position(new Integer(x.intValue() + 1), y))) 
                  level_26 = (Cell)new_pieces.get(new Position(new Integer(x.intValue() + 1), y));
                else 
                  level_26 = new Cell();
                level_26.color = (((Cell)pieces.get(new Position(x, y))).color);
                new_pieces.put(new Position(new Integer(x.intValue() + 1), y), level_26);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
                Cell level_40 = null;
                if (new_pieces.containsKey(new Position(x, y))) 
                  level_40 = (Cell)new_pieces.get(new Position(x, y));
                else 
                  level_40 = new Cell();
                level_40.color = new quotes.empty();
                new_pieces.put(new Position(x, y), level_40);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
                count = new Integer(count.intValue() + 1);
                if (!this.inv_Board().booleanValue()) 
                  UTIL.RunTime("Instance invariant failure in Board");
              }
            }
          }
        }
        pieces = (Map)UTIL.clone(new_pieces);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        return count;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).moveRight);
    }
  }
// ***** VDMTOOLS END Name=moveRight#1|Number


// ***** VDMTOOLS START Name=pre_moveRight#1|Number KEEP=NO
  public Boolean pre_moveRight (final Number posx) throws CGException {
    return Boolean.valueOf(posx.intValue() < LimiteX.intValue());
  }
// ***** VDMTOOLS END Name=pre_moveRight#1|Number

}
;
