
//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-05 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\Workspace\\MFES\\Project\\Cascade\\Cascade\\Cascade.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
package logic;
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Set;
import java.util.HashSet;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Token;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Cascade implements EvaluatePP {


// ***** VDMTOOLS START Name=Position KEEP=NO
  public static class Position implements Record {

    public Number posX;

    public Number posY;


    public Position () {}


    public Position (Number p1, Number p2) {
      posX = p1;
      posY = p2;
    }


    public Object clone () {
      return new Position(posX, posY);
    }


    public String toString () {
      return "mk_Cascade`Position(" + UTIL.toString(posX) + ", " + UTIL.toString(posY) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof Position)) 
        return false;
      else {
        Position temp = (Position)obj;
        return UTIL.equals(posX, temp.posX) && UTIL.equals(posY, temp.posY);
      }
    }


    public int hashCode () {
      return (posX == null ? 0 : posX.hashCode()) + (posY == null ? 0 : posY.hashCode());
    }

  }
// ***** VDMTOOLS END Name=Position
;

// ***** VDMTOOLS START Name=board KEEP=NO
  public volatile Board board = null;
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=level KEEP=NO
  public volatile Number level = null;
// ***** VDMTOOLS END Name=level

// ***** VDMTOOLS START Name=gameScore KEEP=NO
  public volatile Number gameScore = null;
// ***** VDMTOOLS END Name=gameScore

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=CascadeSentinel KEEP=NO
  class CascadeSentinel extends Sentinel {

    public final int play = 0;

    public final int nr_functions = 1;


    public CascadeSentinel () throws CGException {}


    public CascadeSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=CascadeSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new CascadeSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=LimiteX KEEP=NO
  public static final Number LimiteX = new Integer(15);
// ***** VDMTOOLS END Name=LimiteX

// ***** VDMTOOLS START Name=LimiteY KEEP=NO
  public static final Number LimiteY = new Integer(11);
// ***** VDMTOOLS END Name=LimiteY


// ***** VDMTOOLS START Name=inv_X#1|Number KEEP=NO
  static public Boolean inv_X (final Number x) throws CGException {
    Set var2_4 = new HashSet();
    var2_4 = new HashSet();
    int ubi_9 = LimiteX.intValue();
    for (int count_7 = 0; count_7 <= ubi_9; count_7++) 
      var2_4.add(new Integer(count_7));
    return Boolean.valueOf(UTIL.Contains(var2_4, x));
  }
// ***** VDMTOOLS END Name=inv_X#1|Number


// ***** VDMTOOLS START Name=inv_Y#1|Number KEEP=NO
  static public Boolean inv_Y (final Number y) throws CGException {
    Set var2_4 = new HashSet();
    var2_4 = new HashSet();
    int ubi_9 = LimiteY.intValue();
    for (int count_7 = 0; count_7 <= ubi_9; count_7++) 
      var2_4.add(new Integer(count_7));
    return Boolean.valueOf(UTIL.Contains(var2_4, y));
  }
// ***** VDMTOOLS END Name=inv_Y#1|Number


// ***** VDMTOOLS START Name=vdm_init_Cascade KEEP=NO
  private void vdm_init_Cascade () {
    try {
      setSentinel();
      board = new Board();
      level = new Integer(1);
      gameScore = new Integer(0);
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Cascade


// ***** VDMTOOLS START Name=Cascade KEEP=NO
  public Cascade () throws CGException {
    vdm_init_Cascade();
  }
// ***** VDMTOOLS END Name=Cascade


// ***** VDMTOOLS START Name=CalculateScore#1|Number KEEP=NO
  private Number CalculateScore (final Number n_blocks) throws CGException {
    if (!this.pre_CalculateScore(n_blocks).booleanValue()) 
      UTIL.RunTime("Precondition failure in CalculateScore");
    return UTIL.NumberToInt(new Integer(50 + (20 * (n_blocks.intValue() - 3))));
  }
// ***** VDMTOOLS END Name=CalculateScore#1|Number


// ***** VDMTOOLS START Name=pre_CalculateScore#1|Number KEEP=NO
  private Boolean pre_CalculateScore (final Number n_blocks) throws CGException {
    return Boolean.valueOf(n_blocks.intValue() >= 3);
  }
// ***** VDMTOOLS END Name=pre_CalculateScore#1|Number


// ***** VDMTOOLS START Name=play KEEP=NO
  private Number play () throws CGException {
    sentinel.entering(((CascadeSentinel)sentinel).play);
    try {
      return new Integer(0);
    }
    finally {
      sentinel.leaving(((CascadeSentinel)sentinel).play);
    }
  }
// ***** VDMTOOLS END Name=play

}
;
