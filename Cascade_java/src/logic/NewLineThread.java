//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-09 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\Workspace\\MFES\\Project\\Cascade\\Threads/NewLineThread.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
package logic;
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.VDMThread;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class NewLineThread implements EvaluatePP, Runnable {

// ***** VDMTOOLS START Name=game KEEP=NO
  private volatile Cascade game = null;
// ***** VDMTOOLS END Name=game

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel

// ***** VDMTOOLS START Name=procThread KEEP=NO
  VDMThread procThread;
// ***** VDMTOOLS END Name=procThread


// ***** VDMTOOLS START Name=NewLineThreadSentinel KEEP=NO
  class NewLineThreadSentinel extends Sentinel {

    public final int doit = 0;

    public final int NewLineThread = 1;

    public final int nr_functions = 2;


    public NewLineThreadSentinel () throws CGException {}


    public NewLineThreadSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=NewLineThreadSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    switch(fnr) 
    {
      case 0: {
        return Boolean.valueOf((sentinel.act[((NewLineThreadSentinel)sentinel).doit]) <= 1);
      }
    }

    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new NewLineThreadSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=run KEEP=NO
  public void run () {
    try {
      doit();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=run


// ***** VDMTOOLS START Name=start KEEP=NO
  public void start () throws CGException {
    procThread = new VDMThread(this);
    procThread.start();
  }
// ***** VDMTOOLS END Name=start


// ***** VDMTOOLS START Name=vdm_init_NewLineThread KEEP=NO
  private void vdm_init_NewLineThread () {
    try {
      setSentinel();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_NewLineThread


// ***** VDMTOOLS START Name=NewLineThread KEEP=NO
  public NewLineThread () throws CGException {
    vdm_init_NewLineThread();
  }
// ***** VDMTOOLS END Name=NewLineThread


// ***** VDMTOOLS START Name=NewLineThread#1|Cascade KEEP=NO
  public NewLineThread (final Cascade c) throws CGException {
    vdm_init_NewLineThread();
    game = (Cascade)UTIL.clone(c);
  }
// ***** VDMTOOLS END Name=NewLineThread#1|Cascade


// ***** VDMTOOLS START Name=doit KEEP=NO
  public void doit () throws CGException {
    sentinel.entering(((NewLineThreadSentinel)sentinel).doit);
    try {
      while ((game.isPlayable).booleanValue()){
    	Thread.sleep(game.timeToNextLine.longValue()); //inserted manually
        game.insertLine();
      }
    } catch (InterruptedException e) {
		e.printStackTrace();
	}
    finally {
      sentinel.leaving(((NewLineThreadSentinel)sentinel).doit);
    }
  }
// ***** VDMTOOLS END Name=doit

}
;
